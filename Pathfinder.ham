/*class*/import java.util.Arrays;
import java.lang.Math;

class Pathfinder extends Hamster 
{
	
	static int currX;
	static int currY;
	static int checkX;
	static int checkY;
	
	static int targetX;
	static int targetY;
	
	static boolean done;
	static String[][] map;
	
	static boolean[][] open = new boolean[99][99];
	static boolean[][] closed = new boolean[99][99];
	static int[][] parent = new int[99][99];
	static int[][] gCost = new int[99][99];
	static int[][] hCost = new int[99][99];
	static int[][] fCost = new int[99][99];
	
	static int[] currentPath;
	
	public static int[] findPath(int nposX, int nposY, int ntargetX, int ntargetY, String[][] newMap)
	{
		
		/*
			
			ARRAYS ARE [Y][X]!!!
			
		*/
		
		
		map = newMap;
		currX = nposX;
		currY = nposY;
		targetX = ntargetX;
		targetY = ntargetY;
		
		open[currY][currX] = false;
		closed[currY][currX] = true;
		
		while(!map[currY][currX].equals("*"))
		{
			
			checkX = currX;
			checkY = currY;
			int currf = 999;
			int bestf = 999;
			int[] bestpos = new int[2];
			
			checkY--;
			currf = check();
			if(currf < bestf)
			{
				bestf = currf;
				bestpos[0] = checkY;
				bestpos[1] = checkX;
			}
			
			checkY++;
			checkX++;
			currf = check();
			if(currf < bestf)
			{
				bestf = currf;
				bestpos[0] = checkY;
				bestpos[1] = checkX;
			}
			
			checkX--;
			checkY++;
			currf = check();
			if(currf < bestf)
			{
				bestf = currf;
				bestpos[0] = checkY;
				bestpos[1] = checkX;
			}
			
			checkY--;
			checkX--;
			currf = check();
			if(currf < bestf)
			{
				bestf = currf;
				bestpos[0] = checkY;
				bestpos[1] = checkX;
			}
			checkX++;
			
			currX = bestpos[1];
			currY = bestpos[0];
			open[currY][currX] = false;
			closed[currY][currX] = true;
			
		}
		
		currentPath = reversePath();
		
		return currentPath; //Necessary return
	}
	
	static int check()
	{
		
		int x = checkX;
		int y = checkY;
		
		if(x >= 0 && y >= 0 && x < map[0].length && y < map.length && !map[y][x].equals("#") && !closed[y][x])
		{
			parent[y][x] = parent(x, y);
			
			switch(parent[y][x])
			{
				case 0:
					gCost[y][x] = gCost[y-1][x] + 1;
					break;
				case 1:
					gCost[y][x] = gCost[y][x+1] + 1;
					break;
				case 2:
					gCost[y][x] = gCost[y+1][x] + 1;
					break;
				case 3:
					gCost[y][x] = gCost[y][x-1] + 1;
					break;	
			}
			
			hCost[y][x] = (int) Math.round(10 * Math.sqrt(Math.abs(targetX - x) + Math.abs(targetY - y)));
			fCost[y][x] = gCost[y][x] + hCost[y][x];
			
			return fCost[y][x];
		} else
			return 99999;
	}
	
	static int parent(int x, int y)
	{
		int best = 77;
		double bestd = 999.99;
		double currd = 999.99;
			
		for(int i = 0; i < 4; i++)
		{
			switch(i)
			{
				case 0:
					y--;
					break;
				case 1:
					y++;
					x++;
					break;
				case 2:
					x--;
					y++;
					break;
				case 3:
					y--;
					x--;
					break;	
			}
			if(x >= 0 && y >= 0)
			{
				if(closed[y][x])
					currd = gCost[y][x];
				if(currd < bestd)
				{
					bestd = currd;
					best = i;
				}
			}
		}
		x++;
		return best;
	}
	
	static int reversePathDigit(int digit)
	{
		
		switch(digit)
		{
			case 0:
				digit = 2;
				break;
			case 1:
				digit = 3;
				break;
			case 2:
				digit = 0;
				break;
			case 3:
				digit = 1;
				break;
		}
		
		return digit;
		
	}
	static int[] reversePath()
	{
		
		int reX = currX;
		int reY = currY;
		int i = 0;
		
		while(!map[reY][reX].equals(">"))	//Get Path length
		{
			switch(parent[reY][reX])
			{
				case 0:
					reY--;
					break;
				case 1:
					reX++;
					break;
				case 2:
					reY++;
					break;
				case 3:
					reX--;
					break;	
			}
			i++;
		}
		
		int[] reversePath = new int[i];
		int[] path = new int[i];
		i = 0;
		reX = currX;
		reY = currY;
		while(!map[reY][reX].equals(">"))	//Write reverse Path to reversePath
		{
			reversePath[i] = parent[reY][reX];
			
			switch(parent[reY][reX])
			{
				case 0:
					reY--;
					break;
				case 1:
					reX++;
					break;
				case 2:
					reY++;
					break;
				case 3:
					reX--;
					break;	
			}
			i++;
		}
		
		i = 0;
		for(i = reversePath.length - 1; i > 0; i--)	//Reverse path
		{
			path[reversePath.length - (i+1)] = reversePathDigit(reversePath[i]);
		}
		
		return path;
		
	}   
}
