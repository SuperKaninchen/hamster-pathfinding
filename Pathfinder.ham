/*class*/import java.util.Arrays;

class Pathfinder extends Hamster 
{
	
	static int textX;
	static int textY;
	static int lastX;
	static int lastY;
	
	static int targetX;
	static int targetY;
	static int bestX;
	static int bestY;
	
	static double deltaX;
	static double deltaY;
	static double currDist;
	static double bestDist = 200.0;
	
	static boolean done;
	
	static int[] currentPath = {0};
	static int[] testPath = new int[2];
	static String[][] map;
	static boolean[][] checked = new boolean[99][99];
	static boolean[][] walked = new boolean[99][99];
	static boolean checkedCurrPos;
	
	public static int[] findPath(int nposX, int nposY, int ntargetX, int ntargetY, String[][] newMap)
	{
		
		textX = nposX;
		textY = nposY;
		targetX = ntargetX;
		targetY = ntargetY;
		map = newMap;
		//System.out.println("nposX: " + nposX + "|nposY: " + nposY + "|textX: " + textX + "|textY: " + textY);
		
		while(!done)
		{
			textY--;
			if(textX >= 0 && textY >= 0 && !map[textX][textY].equals("#"))
				calcDistance();
			
			textY++;
			textX++;
			if(textX >= 0 && textY >= 0 && !map[textX][textY].equals("#"))
				calcDistance();
			
			textX--;
			textY++;
			if(textX >= 0 && textY >= 0 && !map[textX][textY].equals("#"))
				calcDistance();
			
			textY--;
			textX--;
			if(textX >= 0 && textY >= 0 && !map[textX][textY].equals("#"))
				calcDistance();
			
			textX++;
			//System.out.println("nposX: " + nposX + "|nposY: " + nposY + "|textX: " + textX + "|textY: " + textY);
			
			if(!walked[bestX][bestY])
				updatePath();
			
			if(lastX == bestX && lastY == bestY)
				if(textY < map.length && !map[textX][textY + 1].equals("#"))
				{
					textY++;
					//System.out.println("adding with force%%%%%%");
					editArray(2);
				}
				else if(textX < map[textY].length && !map[textX + 1][textY].equals("#"))
				{
					textX++;
					//System.out.println("adding with force%%%%%%");
					editArray(1);
				}
				else if(textY > 0 && !map[textX][textY - 1].equals("#"))
				{
					textY--;
					//System.out.println("adding with force%%%%%%");
					editArray(0);
				}
				else if(textX > 0 && !map[textX - 1][textY].equals("#"))
				{
					textX--;
					//System.out.println("adding with force%%%%%%");
					editArray(1);
				}
				else
				{
					
					System.out.println("asdawdasdasdasdasdasdasdfasdasdasdasdasdasdasdasasd");
				
				}
			else
			{
				//System.out.println("lastX: " + lastX + "|lastY: " + lastY + "|bestX: " + bestX + "|bestY: " + bestY);
				textX = bestX;
				textY = bestY;
				lastX = bestX;
				lastY = bestY;
			}
			System.out.println(textX + ":" + textY);
			//return currentPath;
			walked[textX][textY] = true;
		}
		
		for(int i = 0; i < currentPath.length; i++)
			System.out.println("currentpath[" + i + "]: " + currentPath[i]);
		return currentPath;
		
	}
	
	static void calcDistance()
	{
		
		//System.out.println("!!!textX: " + textX + "|textY: " + textY + "|map at pos: " + map[textX][textY]);
		if(textX > targetX)
		{
			deltaX = textX - targetX;
		} else
		{
			deltaX = targetX - textX;
		}
		
		if(textY > targetY)
		{
			deltaY = textY - targetY;
		} else
		{
			deltaY = targetY - textY;
		}
		
		currDist = deltaX + deltaY;	
		
		if(checked[textX][textY] && !walked[textX][textY]){
			checkedCurrPos = true;
			System.out.println("already checked " + textX + ":" + textY);
			//return;
		}
		else
			checkedCurrPos = false;	
		//System.out.println("textX: " + textX + "|textY: " + textY + "|bestX: " + bestX + "|bestY: " + bestY + "|currDist: " + currDist + "|bestDist: " + bestDist);
		if(currDist <= bestDist && !checkedCurrPos)
		{
			
			System.out.println("just checked " + textX + ":" + textY);
			System.out.println("===== " + textX + ":" + textY + " is best");
			bestDist = currDist;
			bestX = textX;
			bestY = textY;
			
		} else
		{
			
			System.out.println("Skipped " + textX + ":" + textY + " because currDist: " + currDist + " is bigger than bestDist: " + bestDist);
			
		}
		
		checked[textX][textY] = true;
		
		if(currDist == 0 || bestDist == 0)
			done = true;
		
	}
	
	static void updatePath()
	{
		
		if(bestX > textX)
			editArray(1);
		else if(bestX < textX)
			editArray(3);
			
		if(bestY > textY)
			editArray(2);
		else if(bestY < textY)
			editArray(0);
		
	}
	
	static void editArray(int newInt)
	{
		
		int currentSize;
		currentSize = currentPath.length;
			
		int newSize = currentSize + 1;
		int[] tempArray = new int[newSize];
		
		for (int i=0; i < currentPath.length; i++)
	   		tempArray[i] = currentPath[i];
		
		tempArray[newSize - 1] = newInt;
		currentPath = tempArray;
		System.out.println("added " + newInt + " to path");
		
	}
	    
}
